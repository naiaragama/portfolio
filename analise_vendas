!pip install matplotlib
!pip install seaborn
!pip install scikit-learn

import pandas as pd
tabela = pd.read_csv('advertising.csv')
display(tabela)

#importando as bibliotecas
import seaborn as sns 
import matplotlib.pyplot as plt

#gráfico da correlação vendasXinvestimentos em mídias
sns.heatmap(tabela.corr(), cmap="Wistia", annot=True)
plt.show()

y = tabela["Vendas"]
x = tabela[["TV", "Radio","Jornal"]]

from sklearn.model_selection import train_test_split
from sklearn import metrics

x_treino, x_teste, y_treino, y_teste = train_test_split(x,y,)

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

#criando os modelos
modelo_regressaolinear = LinearRegression()
modelo_arvoredecisao = RandomForestRegressor()

modelo_regressaolinear.fit(x_treino, y_treino)
modelo_arvoredecisao.fit(x_treino, y_treino)

#R² -> diz o % que o nosso modelo consegue explicar o que acontece
previsao_regressaolinear = modelo_regressaolinear.predict(x_teste)
previsao_arvorecedisao = modelo_arvoredecisao.predict(x_teste)

from sklearn import metrics

print(metrics.r2_score(y_teste, previsao_regressaolinear))
print(metrics.r2_score(y_teste, previsao_arvorecedisao))

#Visualização Gráfica das Previsões
tabela_auxiliar = pd.DataFrame()
tabela_auxiliar["Previsão Regressao Linear"] = previsao_regressaolinear
tabela_auxiliar["Previsão Arvore Decisao"] = previsao_arvorecedisao

sns.lineplot(data=tabela_auxiliar)
plt.show()

#previsão com novos dados
nova_tabela = pd.read_csv("novos.csv")
display(nova_tabela)

previsao = modelo_arvoredecisao.predict(nova_tabela)
print(previsao)
